// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "GameFramework/SpringArmComponent.h"
#include "Camera/CameraComponent.h"
#include "Components/CapsuleComponent.h"
#include "Components/InputComponent.h"
#include "GameFramework/PlayerController.h"

///////////////////////////////////////////
#include "SuicidalController.generated.h"//
///////////////////////////////////////////

UENUM()
enum LockMode
{
	Player		UMETA(DisplayName = "Lock on Player"),
	FocusPoint	UMETA(DisplayName = "Lock on Focus Point")
};

UENUM()
enum CameraMode
{
	Perspective UMETA(DisplayName = "Full Perspective"),
	Orthogonal	UMETA(DisplayName = "Real Orthogonal"),
	FakeOrtho	UMETA(DisplayName = "False Orthogonal")
};

UCLASS()
//
// Class name: ASuicidalController
// Tasks:
//
//	* Handles input, generating events where needed
//  * Handles death events, spawn events, level reset events
//	* TBD
class GROUPPROJECT_API ASuicidalController : public ACharacter
{
	GENERATED_BODY()

	//
	// Constant data
	//
	
	// Input
	const FName XAxis = "MoveForward";
	const FName YAxis = "MoveLeft";
	const FName XMouse = "CameraHorizontal";
	const FName YMouse = "CameraVertical";
	const FName AJump = "Jump";
	const FName ALeft = "PanLeft";
	const FName ARight = "PanRight";
	
	// The attached graphics component generated by the Character.
	UCapsuleComponent* PlayerRoot;

protected:

	UPROPERTY(BlueprintReadWrite, VisibleAnywhere, Category = "Components")
	USpringArmComponent* CameraSpring;

	UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = "Components")
	UCameraComponent* PlayerCamera;

	UPROPERTY(VisibleAnywhere, Category = "Stats")
	FVector StoredMovement;

	UPROPERTY(VisibleAnywhere, Category = "Stats")
	FVector LastRotation;

	UPROPERTY(BlueprintReadWrite, VisibleAnywhere, Category = "Stats")
	bool Alive = true;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movement Settings", meta = (Min = 0, Max = 1, ClampMin = 0, ClampMax = 1))
	float SmoothFactor = .5f;

	UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = "Preferences")
	TEnumAsByte<LockMode> LockOn = FocusPoint;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Preferences", meta = (EditCondition = "LockOn == FocusPoint"))
	FVector FocusPointLocation;

	UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = "Preferences")
	TEnumAsByte<CameraMode> ViewMode = FakeOrtho;

	UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = "Preferences")
	float CameraAngle = 45.f;

	//
	// Top-down camera properties...
	//

	FVector CameraStart = FVector(-100.f, 0.f, 200.f);
	FRotator CameraTilt = FRotator(-45.f, 0.f, 0.f);
	FTransform WorldDirRef = FTransform(FRotator::ZeroRotator, FVector::ZeroVector);

public:

	// Sets default values for this character's properties
	ASuicidalController();

	UFUNCTION(BlueprintPure, Category = "Stats")
	const bool IsAlive() const;

protected:

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	UFUNCTION(BlueprintPure, Category = "Stats")
	const FRotator GetDesiredRotation() const;

	UFUNCTION(BlueprintImplementableEvent, Category = "Game Events")
	void OnDied(const FString& reason);

	UFUNCTION(BlueprintCallable, Category = "Tools")
	void PanRight();

	UFUNCTION(BlueprintCallable, Category = "Tools")
	void PanLeft();

	UFUNCTION(BlueprintCallable, Category = "Tools")
	void ToggleCursor(bool visible);

	// Movement

	void OnHorizontalMovement(float value);
	void OnVerticalMovement(float value);

	// Camera

	UFUNCTION(BlueprintImplementableEvent, Category = "Game Events")
	void OnCameraHorizontal(float value);

	UFUNCTION(BlueprintImplementableEvent, Category = "Game Events")
	void OnCameraVertical(float value);

	// Jump

	void OnJump();

private:

	// Consumes the stored movement vector and returns it.
	const FVector ConsumeMovementVector();

public:

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	// Registers a new horizontal movement.
	UFUNCTION(BlueprintCallable, Category = "Robot Movement")
	void RegisterHorizontalMovement(const float& value);

	// Registers a new vertical movement.
	UFUNCTION(BlueprintCallable, Category = "Robot Movement")
	void RegisterVerticalMovement(const float& value);
};
